import React, { useState, useEffect, useRef } from 'react';

// Se utiliza para generar IDs únicos para los productos si no vienen de una base de datos
const generateUniqueId = () => Math.random().toString(36).substr(2, 9);

function App() {
  const [exchangeRate, setExchangeRate] = useState(7.2); // Tasa de moneda por defecto
  const [products, setProducts] = useState([
    {
      id: generateUniqueId(),
      name: 'Pan Canilla',
      sku: 'PAN-5YMN',
      category: 'Alimento',
      unit: 'unidad',
      salePrice: 25.00,
      costPrice: 20.00,
      stock: 50,
      reorderThreshold: 10,
      image: 'https://placehold.co/100x100/121212/FFFFFF?text=Pan', // Placeholder
      variants: [],
      description: 'Pan fresco ideal para acompañar tus comidas.'
    },
    {
      id: generateUniqueId(),
      name: 'Relojes Inteligentes',
      sku: 'RELOJES-INTELIG-LPC3',
      category: 'Tecnología',
      unit: 'unidad',
      salePrice: 150.00,
      costPrice: 100.00,
      stock: 30,
      reorderThreshold: 5,
      image: 'https://placehold.co/100x100/121212/FFFFFF?text=Reloj', // Placeholder
      variants: ['Color: Negro', 'Color: Plata', 'Memoria: 32GB'],
      description: 'Smartwatch con múltiples funciones y gran autonomía.'
    },
    {
      id: generateUniqueId(),
      name: 'Cebolla',
      sku: 'CEBOLLA-PUWL',
      category: 'Verduras',
      unit: 'kg',
      salePrice: 13.50,
      costPrice: 10.00,
      stock: 1999,
      reorderThreshold: 0.2,
      image: 'https://placehold.co/100x100/121212/FFFFFF?text=Cebolla', // Placeholder
      variants: [],
      description: 'Cebolla fresca para tus platillos diarios.'
    },
    {
      id: generateUniqueId(),
      name: 'Harina Pan',
      sku: 'HARINA-PAN-TFAS',
      category: 'Alimento',
      unit: 'unidad',
      salePrice: 3.50,
      costPrice: 2.50,
      stock: 200,
      reorderThreshold: 20,
      image: 'https://placehold.co/100x100/121212/FFFFFF?text=Harina', // Placeholder
      variants: ['Tipo: Maíz', 'Tipo: Trigo'],
      description: 'Harina precocida de maíz, ideal para arepas.'
    },
    {
        id: generateUniqueId(),
        name: 'Leche Pasteurizada',
        sku: 'LECHE-PAS-MILK',
        category: 'Lácteos',
        unit: 'litro',
        salePrice: 2.80,
        costPrice: 2.00,
        stock: 120,
        reorderThreshold: 15,
        image: 'https://placehold.co/100x100/121212/FFFFFF?text=Leche',
        variants: [],
        description: 'Leche fresca pasteurizada, envase de 1 litro.'
    },
    {
        id: generateUniqueId(),
        name: 'Auriculares Inalámbricos',
        sku: 'AUR-WIRE-XYZ',
        category: 'Electrónica',
        unit: 'unidad',
        salePrice: 45.00,
        costPrice: 30.00,
        stock: 75,
        reorderThreshold: 10,
        image: 'https://placehold.co/100x100/121212/FFFFFF?text=Auriculares',
        variants: ['Color: Negro', 'Color: Plata'],
        description: 'Auriculares Bluetooth con sonido de alta fidelidad.'
    },
    {
        id: generateUniqueId(),
        name: 'Aceite Comestible',
        sku: 'ACEITE-SUNFLOWER',
        category: 'Abarrotes',
        unit: 'litro',
        salePrice: 5.00,
        costPrice: 4.00,
        stock: 90,
        reorderThreshold: 10,
        image: 'https://placehold.co/100x100/121212/FFFFFF?text=Aceite',
        variants: [],
        description: 'Aceite vegetal de girasol, ideal para cocinar.'
    },
    {
        id: generateUniqueId(),
        name: 'Laptop Gaming',
        sku: 'LAPTOP-GAM-PRO',
        category: 'Tecnología',
        unit: 'unidad',
        salePrice: 1200.00,
        costPrice: 900.00,
        stock: 15,
        reorderThreshold: 3,
        image: 'https://placehold.co/100x100/121212/FFFFFF?text=Laptop',
        variants: ['RAM: 16GB', 'RAM: 32GB', 'SSD: 1TB'],
        description: 'Laptop de alto rendimiento para gaming y diseño.'
    },
  ]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    category: 'Todas las Categorías',
    brand: 'Todas las Marcas',
    provider: 'Todos los Proveedores',
    color: 'Todos los Colores',
    size: 'Todas las Tallas',
    orderBy: 'Fecha',
    orderDirection: 'Descendente',
  });
  const [showUpdatePriceModal, setShowUpdatePriceModal] = useState(false);
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);
  const [productToDelete, setProductToDelete] = useState(null);
  const [isSidebarPinned, setIsSidebarPinned] = useState(false); // Estado para controlar si el sidebar está fijado
  const [isHovering, setIsHovering] = useState(false); // Nuevo estado para controlar el hover del sidebar
  const [showFilters, setShowFilters] = useState(false); // Nuevo estado para controlar la visibilidad de los filtros, por defecto ocultos
  const [isSearchBarSticky, setIsSearchBarSticky] = useState(false); // Estado para controlar si la barra de búsqueda está anclada
  const [kebabMenuOpen, setKebabMenuOpen] = useState({}); // Estado para controlar la visibilidad de cada menú kebab
  const [showInfoModal, setShowInfoModal] = useState(false); // Estado para el modal de información del producto
  const [selectedProductInfo, setSelectedProductInfo] = useState(null); // Producto seleccionado para mostrar en el modal de info

  const mainContentRef = useRef(null); // Referencia para el elemento main (contenido principal)

  const allCategories = [...new Set(products.map(p => p.category))];

  // Filtra los productos basados en el término de búsqueda y los filtros seleccionados
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          product.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          (product.description && product.description.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCategory = filters.category === 'Todas las Categorías' || product.category === filters.category;
    return matchesSearch && matchesCategory;
  }).sort((a, b) => {
    if (filters.orderBy === 'Fecha') {
      return filters.orderDirection === 'Descendente' ? b.id.localeCompare(a.id) : a.id.localeCompare(b.id);
    }
    return 0;
  });

  const handleFilterChange = (filterName, value) => {
    setFilters(prevFilters => ({
      ...prevFilters,
      [filterName]: value,
    }));
  };

  const handleDeleteProduct = (productId) => {
    setProductToDelete(productId);
    setShowConfirmationModal(true);
    setKebabMenuOpen({}); // Cierra cualquier menú kebab abierto
  };

  const confirmDelete = () => {
    setProducts(products.filter(p => p.id !== productToDelete));
    setShowConfirmationModal(false);
    setProductToDelete(null);
  };

  const cancelDelete = () => {
    setShowConfirmationModal(false);
    setProductToDelete(null);
  };

  // Función para alternar el estado de fijado del sidebar
  const toggleSidebarPin = () => {
    setIsSidebarPinned(!isSidebarPinned);
    // Asegurarse de que el estado de hover se reinicie al fijar/desfijar
    setIsHovering(false);
  };

  // Función para ocultar/mostrar filtros
  const toggleFilters = () => {
    setShowFilters(!showFilters);
  };

  // Función para abrir/cerrar el menú kebab de un producto específico
  const toggleKebabMenu = (productId) => {
    setKebabMenuOpen(prevState => ({
      ...prevState,
      [productId]: !prevState[productId] // Invierte el estado del menú para ese producto
    }));
  };

  // Función para manejar el clic en 'Info'
  const handleInfoClick = (product) => {
    setSelectedProductInfo(product);
    setShowInfoModal(true);
    setKebabMenuOpen({}); // Cierra el menú kebab después de la selección
  };

  // Función para manejar el clic en 'Editar'
  const handleEditClick = (product) => {
    alert(`Editar producto: ${product.name} (ID: ${product.id})`); // Simulación
    setKebabMenuOpen({}); // Cierra el menú kebab después de la selección
  };

  // Efecto para detectar el scroll y activar el modo sticky de la barra de búsqueda
  useEffect(() => {
    const handleScroll = () => {
      if (mainContentRef.current) {
        // Define un umbral de scroll. Por ejemplo, 100px desde la parte superior.
        const scrollThreshold = 100;
        setIsSearchBarSticky(mainContentRef.current.scrollTop > scrollThreshold);
      }
    };

    const currentRef = mainContentRef.current; // Captura el valor actual del ref
    if (currentRef) {
      currentRef.addEventListener('scroll', handleScroll);
    }

    return () => {
      if (currentRef) {
        currentRef.removeEventListener('scroll', handleScroll);
      }
    };
  }, []); // El array vacío asegura que este efecto se ejecute solo una vez al montar

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 font-sans flex">
      {/* Barra Superior */}
      <header className="fixed top-0 left-0 right-0 h-16 bg-gray-700 py-3 px-8 flex items-center justify-between shadow-md z-20">
        <div className="flex items-center space-x-4">
          {/* Tasa de Cambio */}
          <p className="text-lg">
            1 USD = <span className="font-bold text-green-400">EUR {exchangeRate.toFixed(2)}</span>
            <span className="text-gray-400 text-xs block">(Última Act: 22/8/2025, 10:37:14 a. m.)</span>
          </p>
        </div>
        <div className="flex items-center space-x-4"> {/* Lado derecho del header */}
          {/* Botón Añadir Producto */}
          <button className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out text-sm">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Añadir Producto
          </button>
        </div>
      </header>

      {/* Sidebar de Navegación */}
      <aside
        className={`
          bg-gray-800 p-6 flex flex-col h-screen fixed left-0 z-30 transition-all duration-300
          ${isSidebarPinned || isHovering ? 'w-64' : 'w-20'}
        `}
        onMouseEnter={() => !isSidebarPinned && setIsHovering(true)}
        onMouseLeave={() => !isSidebarPinned && setIsHovering(false)}
        style={{ top: '4rem' }} // Posiciona el sidebar debajo del header fijo
      >
        <div className="flex items-center mb-8">
          <button onClick={toggleSidebarPin} className="text-gray-400 hover:text-gray-100 focus:outline-none mr-4">
            <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              {isSidebarPinned ? (
                // Icono de "fijado" (un pin)
                <path d="M14 8V6h-4v2H7v14h10V8h-3zm-2-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
              ) : (
                // Icono de "hamburguesa" (tres rayas)
                <path d="M4 6h16M4 12h16M4 18h16"></path>
              )}
            </svg>
          </button>
          {(isSidebarPinned || isHovering) && <h1 className="text-2xl font-bold text-gray-100">Label</h1>}
        </div>

        <nav className="flex-1 space-y-2">
          {/* Menú Principal */}
          {(isSidebarPinned || isHovering) && <div className="text-gray-400 text-sm mb-4">Menú Principal</div>}
          <a href="#" className="flex items-center py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors">
            <svg className="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M3 13h18M3 8h18M3 18h18"></path>
            </svg>
            {(isSidebarPinned || isHovering) && <span>Panel</span>}
          </a>
          <a href="#" className="flex items-center py-2 px-4 rounded-lg bg-yellow-600 bg-opacity-30 text-yellow-300 hover:bg-yellow-700 hover:bg-opacity-40 transition-colors">
            <svg className="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
            </svg>
            {(isSidebarPinned || isHovering) && <span>Inventario</span>}
          </a>
          <a href="#" className="flex items-center py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors">
            <svg className="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 11c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"></path><path d="M18.89 12.3c-.09-.7-.27-1.37-.5-2h-3.4c-.14-1.2-.6-2.31-1.32-3.23l2.84-2.84c.3-.3.29-.77-.01-1.07-.3-.3-.77-.29-1.07.01l-2.84 2.84c-.92-.72-2.03-1.18-3.23-1.32V3.61c0-.42-.34-.76-.76-.76s-.76.34-.76.76v3.4c-1.2.14-2.31.6-3.23 1.32l-2.84-2.84c-.3-.3-.77-.29-1.07.01-.3.3-.29.77.01 1.07l2.84 2.84c-.72.92-1.18 2.03-1.32 3.23H3.11c-.42 0-.76.34-.76.76s.34.76.76.76h3.4c.14 1.2.6 2.31 1.32 3.23l-2.84 2.84c-.3.3-.29.77.01 1.07.3.3.77.29 1.07-.01l2.84-2.84c.92.72 2.03 1.18 3.23 1.32v3.4c0 .42.34.76.76.76s.76-.34.76-.76v-3.4c1.2-.14 2.31-.6 3.23-1.32l2.84 2.84c.3.3.77.29 1.07-.01.3-.3.29-.77-.01-1.07l-2.84-2.84c.72-.92 1.18-2.03 1.32-3.23h3.4c.42 0 .76-.34.76-.76s-.34-.76-.76-.76h-3.4z"></path>
            </svg>
            {(isSidebarPinned || isHovering) && <span>Finanzas</span>}
          </a>
          <a href="#" className="flex items-center py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors">
            <svg className="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M22 9h-4V3H6v6H2v10h20V9zM8 5h8v4H8V5zm12 12H4v-6h16v6z"></path>
            </svg>
            {(isSidebarPinned || isHovering) && <span>Punto de Venta</span>}
          </a>
          <a href="#" className="flex items-center py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors">
            <svg className="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08s5.97 1.09 6 3.08c-1.29 1.94-3.5 3.22-6 3.22z"></path>
            </svg>
            {(isSidebarPinned || isHovering) && <span>Clientes y Proveedores</span>}
          </a>
          <a href="#" className="flex items-center py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors">
            <svg className="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
            </svg>
            {(isSidebarPinned || isHovering) && <span>Estadísticas y Reportes</span>}
          </a>
          <a href="#" className="flex items-center py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors">
            <svg className="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.09-.75-1.72-1.02L13.23 2.5c-.08-.23-.3-.38-.54-.38h-4c-.24 0-.46.15-.55.38L7.02 5.09c-.63.27-1.2.62-1.72 1.02l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.12.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.09.75 1.72 1.02l.36 2.59c.08.23.3.38.54.38h4c.24 0 .46-.15.55-.38l.36-2.59c.63-.27 1.2-.62 1.72-1.02l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"></path>
            </svg>
            {(isSidebarPinned || isHovering) && <span>Ajustes</span>}
          </a>
        </nav>
        {(isSidebarPinned || isHovering) && (
          <div className="mt-auto pt-6 border-t border-gray-700">
              <div className="flex items-center">
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
                      PU
                  </div>
                  <div className="ml-3">
                      <p className="text-gray-100">Hola, Pruebas Usuario!</p>
                      <a href="#" className="text-blue-400 text-sm hover:underline">
                          Cerrar Sesión
                          <svg className="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                          </svg>
                      </a>
                  </div>
              </div>
          </div>
        )}
      </aside>

      {/* Contenido Principal */}
      <main
        ref={mainContentRef}
        className={`
          flex-1 p-8 overflow-y-auto relative
          transition-all duration-300
          ${isSidebarPinned ? 'ml-64' : 'ml-20'}
        `}
        style={{ paddingTop: '4rem' }} // Asegura que el contenido principal empiece debajo del header fijo
      >
        {/* Barra de búsqueda y filtros */}
        <div className={`bg-gray-800 p-6 rounded-lg shadow-lg mb-8 sticky top-0 z-10 transition-all duration-300 ${isSearchBarSticky ? 'w-full' : ''}`}>
          <div className="flex flex-wrap items-center justify-between gap-3 mb-4">
            {/* Search Input */}
            <input
              type="text"
              placeholder="Buscar por nombre, SKU, Marca, Proveedor..."
              className={`p-3 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-100 placeholder-gray-400 transition-all duration-300 flex-grow`}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />

            {/* Botón para ocultar/mostrar filtros */}
            <button
              onClick={toggleFilters}
              className="p-2 rounded-lg bg-gray-700 border border-gray-600 hover:bg-gray-600 transition-colors text-gray-100 flex items-center justify-center shrink-0"
              title={showFilters ? 'Ocultar Filtros' : 'Mostrar Filtros'}
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                {showFilters ? (
                  <path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"/>
                ) : (
                  <path d="M12 16l6-6-1.41-1.41L12 13.17l-4.59-4.58L6 10z"/>
                )}
              </svg>
              <span className="ml-2 text-sm">{showFilters ? 'Ocultar Filtros' : 'Mostrar Filtros'}</span>
            </button>
          </div>

          {showFilters && (
            <div className="flex flex-wrap items-center gap-2"> {/* Contenido de los filtros */}
              {/* Grupo 1 de Filtros (Select Category and Buttons) */}
              <div className="flex flex-wrap items-center gap-2">
                <select
                  className="p-2 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-100 appearance-none cursor-pointer text-sm"
                  value={filters.category}
                  onChange={(e) => handleFilterChange('category', e.target.value)}
                >
                  <option>Todas las Categorías</option>
                  {allCategories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
                <button className="p-2 rounded-lg bg-gray-700 border border-gray-600 hover:bg-gray-600 transition-colors text-gray-100 text-sm">Todas las Marcas</button>
                <button className="p-2 rounded-lg bg-gray-700 border border-gray-600 hover:bg-gray-600 transition-colors text-gray-100 text-sm">Todos los Proveedores</button>
                <button className="p-2 rounded-lg bg-gray-700 border border-gray-600 hover:bg-gray-600 transition-colors text-gray-100 text-sm">Todos los Colores</button>
                <button className="p-2 rounded-lg bg-gray-700 border border-gray-600 hover:bg-gray-600 transition-colors text-gray-100 text-sm">Todas las Tallas</button>
              </div>

              {/* Grupo 2 de Filtros (Select Order and Action Buttons) */}
              <div className="flex flex-wrap items-center gap-2">
                <select
                  className="p-2 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-100 appearance-none cursor-pointer text-sm"
                  value={filters.orderDirection}
                  onChange={(e) => handleFilterChange('orderDirection', e.target.value)}
                >
                    <option>Descendente</option>
                    <option>Ascendente</option>
                </select>
                <button className="bg-gray-700 hover:bg-gray-600 text-gray-100 font-semibold py-2 px-3 rounded-lg shadow-md transition duration-300 ease-in-out text-sm">
                    Mostrar Reporte de Variantes
                </button>
                <button onClick={() => setShowUpdatePriceModal(true)} className="bg-orange-600 hover:bg-orange-700 text-white font-semibold py-2 px-3 rounded-lg shadow-md transition duration-300 ease-in-out text-sm">
                  Sugerir Actualización de Precios (Devaluación)
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Lista de Productos */}
        <h2 className="text-2xl font-bold mb-6">Lista de Productos</h2>
        {/* Grid responsivo: 1 columna en móvil, 2 en sm, 3 en md, 4 en lg */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {filteredProducts.map(product => (
            <div
              key={product.id}
              className="bg-gray-800 p-4 rounded-lg shadow-lg relative flex flex-col items-center text-center transition-all duration-300 border border-gray-700 hover:border-blue-500"
            >
              {/* Kebab menu button */}
              <div className="absolute top-2 right-2 z-10">
                  <button onClick={() => toggleKebabMenu(product.id)} className="p-1 rounded-full hover:bg-gray-700 text-gray-400 focus:outline-none">
                      {/* Ellipsis Vertical Icon */}
                      <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path>
                      </svg>
                  </button>
                  {kebabMenuOpen[product.id] && (
                      <div className="absolute right-0 mt-2 w-40 bg-gray-700 rounded-md shadow-lg py-1 z-20">
                          <button onClick={() => handleInfoClick(product)} className="block px-4 py-2 text-sm text-gray-100 hover:bg-gray-600 w-full text-left">
                              Info
                          </button>
                          <button onClick={() => handleEditClick(product)} className="block px-4 py-2 text-sm text-gray-100 hover:bg-gray-600 w-full text-left">
                              Editar
                          </button>
                          <button onClick={() => handleDeleteProduct(product.id)} className="block px-4 py-2 text-sm text-red-400 hover:bg-gray-600 w-full text-left">
                              Eliminar
                          </button>
                      </div>
                  )}
              </div>

              <img
                src={product.image}
                alt={product.name}
                className="w-24 h-24 rounded-lg object-cover mb-3 border border-gray-600"
                onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/96x96/121212/FFFFFF?text=Sin+Imagen" }} // Fallback
              />
              <h3 className="text-lg font-semibold text-gray-100 mb-1 leading-tight">{product.name}</h3>
              <p className="text-gray-400 text-xs mb-2">SKU: <span className="font-medium text-blue-400">{product.sku}</span></p>
              <p className="text-gray-400 text-xs mb-2">Categoría: <span className="font-medium text-purple-400">{product.category}</span></p>

              <div className="flex justify-between w-full mt-2 text-sm">
                  <p className="text-gray-300">Precio:</p>
                  <p className="font-bold text-green-400">EUR {product.salePrice.toFixed(2)}</p>
              </div>
              <div className="flex justify-between w-full text-sm">
                  <p className="text-gray-300">Stock:</p>
                  <p className="font-bold text-blue-400">{product.stock} unid.</p>
              </div>
            </div>
          ))}
        </div>

        {/* Modal para Sugerir Actualización de Precios */}
        {showUpdatePriceModal && (
          <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-md border border-gray-700">
              <h3 className="text-xl font-bold text-gray-100 mb-4">Sugerir Actualización de Precios</h3>
              <p className="text-gray-300 mb-6">Esta función simularía una devaluación y sugeriría nuevos precios. ¿Deseas continuar?</p>
              <div className="flex justify-end space-x-4">
                <button
                  onClick={() => setShowUpdatePriceModal(false)}
                  className="bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-300 ease-in-out"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => {
                    alert('Función de actualización de precios simulada.'); // Reemplazar con lógica real
                    setShowUpdatePriceModal(false);
                  }}
                  className="bg-orange-600 hover:bg-orange-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-300 ease-in-out"
                >
                  Confirmar
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Modal de Confirmación de Eliminación */}
        {showConfirmationModal && (
          <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-md border border-gray-700">
              <h3 className="text-xl font-bold text-gray-100 mb-4">Confirmar Eliminación</h3>
              <p className="text-gray-300 mb-6">¿Estás seguro de que quieres eliminar este producto? Esta acción no se puede deshacer.</p>
              <div className="flex justify-end space-x-4">
                <button
                  onClick={cancelDelete}
                  className="bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-300 ease-in-out"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmDelete}
                  className="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out"
                >
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Modal de Información Detallada del Producto */}
        {showInfoModal && selectedProductInfo && (
          <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-lg border border-gray-700 text-gray-100">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-2xl font-bold">{selectedProductInfo.name}</h3>
                <button onClick={() => setShowInfoModal(false)} className="text-gray-400 hover:text-gray-100 focus:outline-none">
                  <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path>
                  </svg>
                </button>
              </div>
              <div className="mb-4 flex flex-col sm:flex-row items-center sm:items-start space-y-4 sm:space-y-0 sm:space-x-6">
                <img
                  src={selectedProductInfo.image}
                  alt={selectedProductInfo.name}
                  className="w-32 h-32 rounded-lg object-cover flex-shrink-0"
                  onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/128x128/121212/FFFFFF?text=Sin+Imagen" }}
                />
                <div className="flex-1 text-sm">
                  <p className="mb-1"><span className="font-semibold text-gray-300">SKU:</span> <span className="text-blue-400">{selectedProductInfo.sku}</span></p>
                  <p className="mb-1"><span className="font-semibold text-gray-300">Categoría:</span> <span className="text-purple-400">{selectedProductInfo.category}</span></p>
                  <p className="mb-1"><span className="font-semibold text-gray-300">Unidad:</span> {selectedProductInfo.unit}</p>
                  <p className="mb-1"><span className="font-semibold text-gray-300">Precio de Venta:</span> <span className="font-bold text-green-400">EUR {selectedProductInfo.salePrice.toFixed(2)}</span></p>
                  <p className="mb-1"><span className="font-semibold text-gray-300">Costo Unitario:</span> <span className="font-bold text-orange-400">EUR {selectedProductInfo.costPrice.toFixed(2)}</span></p>
                  <p className="mb-1"><span className="font-bold text-gray-300">Stock:</span> <span className="font-bold text-blue-400">{selectedProductInfo.stock} unidades</span></p>
                  <p className="mb-1"><span className="font-semibold text-gray-300">Umbral de Reaprovisionamiento:</span> <span className="font-bold text-red-400">{selectedProductInfo.reorderThreshold}</span></p>
                  {selectedProductInfo.variants.length > 0 && (
                    <p className="mb-1"><span className="font-semibold text-gray-300">Variantes:</span> {selectedProductInfo.variants.join(', ')}</p>
                  )}
                  {selectedProductInfo.description && (
                    <p className="mt-2 text-gray-300"><span className="font-semibold text-gray-300">Descripción:</span> {selectedProductInfo.description}</p>
                  )}
                </div>
              </div>
              <div className="flex justify-end space-x-4 mt-6">
                <button
                  onClick={() => handleEditClick(selectedProductInfo)}
                  className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out flex items-center text-sm"
                >
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  Editar
                </button>
                <button
                  onClick={() => { handleDeleteProduct(selectedProductInfo.id); setShowInfoModal(false); }}
                  className="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out flex items-center text-sm"
                >
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
